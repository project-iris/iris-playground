Iris through Go... API v1
Bringing simplicity back to distributed services

PÃ©ter SzilÃ¡gyi

European Institute for Innovation and Technology
EÃ¶tvÃ¶s LorÃ¡nd University, Budapest, Hungary
BabeÅŸ-Bolyai University, Cluj-Napoca, Romania

http://iris.karalabe.com
@iriscmf

peterke@gmail.com
@peter_szilagyi

* What the heck is Iris?

* Decentralized cloud messaging

- Zero configuration, self organization, semantic addressing
- Perfect secrecy against passive and active attacks
- Beautiful, simple and language agnostic API

.image go.v1/whitespace.png 0 0

I.e. If starting a batch of VMs on Google Compute Engine is a one liner,

  gcutil addinstance vm-1 vm-2 ... vm-N

.image go.v1/whitespace.png 0 0

Assembling them into a distributed system should be a one liner too!

  iris -net <service name> -rsa <private key>

* What can it do?

* It communicates, of course!

.image go.v1/img/overview_schemes.png 280 0

- Req/Rep: Load balanced request handling by a specific cluster of nodes
- Broadcast: Multicast messaging to all members of a cluster of nodes
- Tunnel: Stream oriented, ordered and throttled data exchange
- Pub/Sub: Multicast messaging to all subscribers of a topic

* What makes it special? Simplicity!

* Instances consolidated based on responsibility

.image go.v1/img/overview_instances_vs_clusters.png 283 0

Clusters are the smallest _logical_ units

- Any number of instances may join the same cluster
- Clusters are addressable, individual instances aren't

âŠ• Harder to abuse, fewer moving components, self organization

* Meaningful and non-dynamic addressing

.image go.v1/img/overview_physical_vs_semantic.png 283 0

Routing based on semantic addressing

- Clusters can be reached through their textual names
- Clients can request delivery to a single or all members

âŠ• Implicit failovers, automatic load balancing, simpler client code

* Implicit security while trusting the trustworthy

.image go.v1/img/overview_authentication_and_encryption.png 283 0

Security at service level

- All members of a service are trusted transitively
- Gateway nodes can protect federated services

âŠ• Decoupled system, optimized encryption, out of the box

* Show me the code!

* Challenge #0 â€“ Boilerplate

Assemble a network of micro services:

- Connect arbitrarily many service instances
- Permit any number to be under the same name
- Enable decentralized communication between them

.html go.v1/embed/challenge_screws.html

* Solution #0 â€“ Register

.play go.v1/src/register.go /START OMIT/,/END OMIT/ HLreg

_Note:_Connecting_as_a_simple_client_is_ [[http://godoc.org/gopkg.in/project-iris/iris-go.v1#Connect][_also_supported_]].

* Register highlights

.html go.v1/ref/register.html

  Register(port int, cluster string, handler ServiceHandler, limits ServiceLimits) â†’ Service
- Connects to the local Iris message relay on port _port_
- Registers the connecting service as a member of _cluster_
- Assigns _handler_ as the callback for inbound service events
- Configures the concurrency and queue size according to _limits_

.image go.v1/whitespace.png 0 0

.html go.v1/ref/servicehandler_init.html

  func (iris.ServiceHandler) Init (connection *iris.Connection)
- Called once after the service is registered into the Iris network
- May initialize any internal state dependent on the live connection

* Challenge #1 â€“ Web requests

Simulate a system for handling web requests:

- Browsers issue requests
- Web servers handle requests
- Distribute requests between servers

.html go.v1/embed/challenge_web.html

* Solution #1 â€“ Browser

.play go.v1/src/webbrowser.go /START OMIT/,/END OMIT/ HLreq

_Hint:_Start_ [[go.v1.slide#16][_some_]] _webservers_and_check_back_ ðŸ˜‰

* Solution #1 â€“ Web server

.play go.v1/src/webserver.go /START OMIT/,/END OMIT/ HLreq

_The_presentation_supports_only_one_active_demo_process_per_window._ [[go.v1.slide#16][_Open_]] _new_tab?_

* Request / Reply highlights

.html go.v1/ref/connection_request.html

	func (iris.Connection) Request(cluster string, request []byte, timeout time.Duration) â†’ []byte
- Issues a synchronous request to member of _cluster_
- Requests are load balanced between all members of _cluster_

.image go.v1/whitespace.png 0 0

.html go.v1/ref/servicehandler_handlerequest.html

	func (iris.ServiceHandler) HandleRequest(request []byte) â†’ []byte
- Invoked when a request arrives to the local service
- Result (reply or error) is forwarded back to the caller
- Concurrency is as defined by the limits during registration

.html go.v1/embed/scheme_reqrep.html

* Challenge #2 â€“ Aperture Science Enrichment Center ðŸ˜ˆ

Implement the comlink for Aperture LaboratoriesÂ¹:

- Tune in with Chell to the official messages
- Send the usual good wishes from GLaDOS
- Maybe find some old message remnants?

.html go.v1/embed/challenge_portal.html
.html go.v1/embed/challenge_portal_footnote.html

* Solution #2 â€“ GLaDOS

.play go.v1/src/portalglados.go /START OMIT/,/END OMIT/ HLpub

_Hint:_Boot_GLaDOS_and_let_the_ [[go.v1.slide#20][_experiment_]] _begin_ ðŸ˜‰

* Solution #2 â€“ Chell

.play go.v1/src/portalchell.go /START OMIT/,/END OMIT/ HLsub

_Hint:_Maybe_there_is_an_"unofficial"_channel?_ ðŸ˜‰

* Publish / Subscribe highlights

.html go.v1/ref/connection_subscribe.html

	func (iris.Connection) Subscribe(topic string, handler TopicHandler, limits TopicLimits)
- Subscribes the connection to events on _topic_
- Assigns _handler_ as the event callback for _topic_

.image go.v1/whitespace.png 0 0

.html go.v1/ref/connection_publish.html

	func (iris.Connection) Publish(topic string, event []byte)
- Publishes an event asynchronously to _topic_

.html go.v1/ref/topichandler_handleevent.html

	func (iris.TopicHandler) HandleEvent(event []byte)
- Invoked when an event arrives to the subscribed topic

.html go.v1/embed/scheme_pubsub.html

* Challenge #3 â€“ Data repository

Implement a data distribution system:

- Repositories store potentially large datasets
- Clients make requests for the data blobs
- Ordered and throttled data transfers

.html go.v1/embed/challenge_repo.html

* Solution #3 â€“ Client

.play go.v1/src/repoclient.go /START OMIT/,/END OMIT/ HLtunnel

_Hint:_Start_ [[go.v1.slide#24][_some_]] _data_repositories_ ðŸ˜‰

* Solution #3 â€“ Data store

.play go.v1/src/reposerver.go /START OMIT/,/END OMIT/ HLtunnel

- Proper error handling was omitted for clarity
- Service registration was hidden for clarity

.image go.v1/whitespace.png 0 0

_The_presentation_supports_only_one_active_demo_process_per_window._ [[go.v1.slide#24][_Open_]] _new_tab?_

* Tunnel highlights

.html go.v1/ref/connection_tunnel.html

	func (iris.Connection) Tunnel(cluster string, timeout time.Duration) â†’ iris.Tunnel
- Opens a direct tunnel to a member of _cluster_
- Order is guaranteed, data flow is throttled

.image go.v1/whitespace.png 0 0

.html go.v1/ref/tunnel_send.html

	func (iris.Tunnel) Send(message []byte, timeout time.Duration)
- Sends a message over the tunnel to the remote pair
- Partial sends (timeout) are discarded remotely

.html go.v1/embed/scheme_tunnel.html
.html go.v1/ref/tunnel_recv.html

	func (iris.Tunnel) Recv(timeout time.Duration) â†’ []byte
- Retrieves a message from the tunnel

* How does this all work?

* Sneak behind the scenes

.html go.v1/embed/overview_relay.html

Iris nodes do the heavy lifting (one/host):

- Service discovery
- Message routing
- Data encryption
- Load balancing

.image go.v1/whitespace.png 0 0

Thin clients bathe in the glory:

- Connect to a local Iris node
- Send all the messages!

* Where to go next?

Iris resources

- Project website: [[http://iris.karalabe.com]]
- The book of Iris: [[http://iris.karalabe.com/book]]
- Yummy goodies: [[http://iris.karalabe.com/talks][talks]] | [[http://iris.karalabe.com/papers][papers]] | [[http://iris.karalabe.com/downloads][downloads]]

.image go.v1/whitespace.png 0 0

Iris community:

- Google group: [[https://groups.google.com/group/project-iris][project-iris]]
- Twitter announces: [[https://twitter.com/iriscmf][@iriscmf]]
- GitHub organization: [[https://github.com/project-iris][project-iris]]
