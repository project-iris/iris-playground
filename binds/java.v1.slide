Iris through Java... API v1
Enterprise messaging, the way it should have been

PÃ©ter SzilÃ¡gyi

European Institute for Innovation and Technology
EÃ¶tvÃ¶s LorÃ¡nd University, Budapest, Hungary
BabeÅŸ-Bolyai University, Cluj-Napoca, Romania

http://iris.karalabe.com
@iriscmf

peterke@gmail.com
@peter_szilagyi

* What the heck is Iris?

* Decentralized cloud messaging

- Zero configuration, self organization, semantic addressing
- Perfect secrecy against passive and active attacks
- Beautiful, simple and language agnostic API

.image java.v1/whitespace.png 0 0

I.e. If starting a batch of VMs on Google Compute Engine is a one liner,

  gcutil addinstance vm-1 vm-2 ... vm-N

.image java.v1/whitespace.png 0 0

Assembling them into a distributed system should be a one liner too!

  iris -net <service name> -rsa <private key>

* What can it do?

* It communicates, of course!

.image java.v1/img/overview_schemes.png 280 0

- Req/Rep: Load balanced request handling by a specific cluster of nodes
- Broadcast: Multicast messaging to all members of a cluster of nodes
- Tunnel: Stream oriented, ordered and throttled data exchange
- Pub/Sub: Multicast messaging to all subscribers of a topic

* What makes it special? Simplicity!

* Instances consolidated based on responsibility

.image java.v1/img/overview_instances_vs_clusters.png 283 0

Clusters are the smallest _logical_ units

- Any number of instances may join the same cluster
- Clusters are addressable, individual instances aren't

âŠ• Harder to abuse, fewer moving components, self organization

* Meaningful and non-dynamic addressing

.image java.v1/img/overview_physical_vs_semantic.png 283 0

Routing based on semantic addressing

- Clusters can be reached through their textual names
- Clients can request delivery to a single or all members

âŠ• Implicit failovers, automatic load balancing, simpler client code

* Implicit security while trusting the trustworthy

.image java.v1/img/overview_authentication_and_encryption.png 283 0

Security at service level

- All members of a service are trusted transitively
- Gateway nodes can protect federated services

âŠ• Decoupled system, optimized encryption, out of the box

* Show me the code!

* Challenge #0 â€“ Boilerplate

Assemble a network of micro services:

- Connect arbitrarily many service instances
- Permit any number to be under the same name
- Enable decentralized communication between them

.html java.v1/embed/challenge_screws.html

* Solution #0 â€“ Service

.play java.v1/src/service.java /START OMIT/,/END OMIT/ HLreg

_Note:_Connecting_as_a_simple_client_is_ [[http://iris.karalabe.com/docs/iris-jvm.v1/com/karalabe/iris/Connection.html#Connection-int-][_also_supported_]].

* Service highlights

.html java.v1/ref/service_new.html

  new Service(int port, String cluster, ServiceHandler handler)
- Connects to the local Iris message relay on port _port_
- Registers the connecting service as a member of _cluster_
- Assigns _handler_ as the callback for inbound service events
- Concurrency and queue size configurable with +1 parameter

.image java.v1/whitespace.png 0 0

.html java.v1/ref/servicehandler_init.html

  @Override void ServiceHandler::init(Connection connection)
- Called once after the service is registered into the Iris network
- May initialize any internal state dependent on the live connection

* Challenge #1 â€“ Web requests

Simulate a system for handling web requests:

- Browsers issue requests
- Web servers handle requests
- Distribute requests between servers

.html java.v1/embed/challenge_web.html

* Solution #1 â€“ Browser

.play java.v1/src/webbrowser.java /START OMIT/,/END OMIT/ HLreq

_Hint:_Start_ [[java.v1.slide#16][_some_]] _webservers_and_check_back_ ðŸ˜‰

* Solution #1 â€“ Web server

.play java.v1/src/webserver.java /START OMIT/,/END OMIT/ HLreq

_The_presentation_supports_only_one_active_demo_process_per_window._ [[java.v1.slide#16][_Open_]] _new_tab?_

* Request / Reply highlights

.html java.v1/ref/connection_request.html

	byte[] Connection::request(String cluster, byte[] request, long timeout)
- Issues a synchronous request to member of _cluster_
- Requests are load balanced between all members of _cluster_

.image java.v1/whitespace.png 0 0

.html java.v1/ref/servicehandler_handlerequest.html

	@Override byte[] ServiceHandler::handleRequest(request byte[])
- Invoked when a request arrives to the local service
- Result (reply or exception) is forwarded back to the caller
- Concurrency is as defined by the limits during registration

.html java.v1/embed/scheme_reqrep.html

* Challenge #2 â€“ Aperture Science Enrichment Center ðŸ˜ˆ

Implement the comlink for Aperture LaboratoriesÂ¹:

- Tune in with Chell to the official messages
- Send the usual good wishes from GLaDOS
- Maybe find some old message remnants?

.html java.v1/embed/challenge_portal.html
.html java.v1/embed/challenge_portal_footnote.html

* Solution #2 â€“ GLaDOS

.image java.v1/whitespace.png 0 0

.play java.v1/src/portalglados.java /START OMIT/,/END OMIT/ HLpub

_Hint:_Boot_GLaDOS_and_let_the_ [[java.v1.slide#20][_experiment_]] _begin_ ðŸ˜‰

* Solution #2 â€“ Chell

.image java.v1/whitespace.png 0 0

.play java.v1/src/portalchell.java /START OMIT/,/END OMIT/ HLsub

_Hint:_Maybe_there_is_an_"unofficial"_channel?_ ðŸ˜‰

* Publish / Subscribe highlights

.html java.v1/ref/connection_subscribe.html

	void Connection::subscribe(String topic, TopicHandler handler)
- Subscribes the connection to events on _topic_
- Assigns _handler_ as the event callback for _topic_
- Limits configurable with additional parameter

.image java.v1/whitespace.png 0 0

.html java.v1/ref/connection_publish.html

	void Connection::publish(String topic, byte[] event)
- Publishes an event asynchronously to _topic_

.html java.v1/embed/scheme_pubsub.html
.html java.v1/ref/topichandler_handleevent.html

	@Override void TopicHandler::handleEvent(byte[] event)
- Invoked when an event arrives to the subscribed topic

* Challenge #3 â€“ Data repository

Implement a data distribution system:

- Repositories store potentially large datasets
- Clients make requests for the data blobs
- Ordered and throttled data transfers

.html java.v1/embed/challenge_repo.html

* Solution #3 â€“ Client

.play java.v1/src/repoclient.java /START OMIT/,/END OMIT/ HLtunnel

_Hint:_Start_ [[java.v1.slide#24][_some_]] _data_repositories_ ðŸ˜‰

* Solution #3 â€“ Data store

.play java.v1/src/reposerver.java /START OMIT/,/END OMIT/ HLtunnel

_The_presentation_supports_only_one_active_demo_process_per_window._ [[java.v1.slide#24][_Open_]] _new_tab?_

* Tunnel highlights

.html java.v1/ref/connection_tunnel.html

	Tunnel Connection::tunnel(String cluster, long timeout)
- Opens a direct tunnel to a member of _cluster_
- Order is guaranteed, data flow is throttled

.image java.v1/whitespace.png 0 0

.html java.v1/ref/tunnel_send.html

	void Tunnel::send(byte[] message, long timeout)
- Sends a message over the tunnel to the remote pair
- Partial sends (timeout) are discarded remotely

.html java.v1/embed/scheme_tunnel.html
.html java.v1/ref/tunnel_receive.html

	byte[] Tunnel::receive(long timeout)
- Retrieves a message from the tunnel

* How does this all work?

* Sneak behind the scenes

.html java.v1/embed/overview_relay.html

Iris nodes do the heavy lifting (one/host):

- Service discovery
- Message routing
- Data encryption
- Load balancing

.image java.v1/whitespace.png 0 0

Thin clients bathe in the glory:

- Connect to a local Iris node
- Send all the messages!

* Where to go next?

Iris resources

- Project website: [[http://iris.karalabe.com]]
- The book of Iris: [[http://iris.karalabe.com/book]]
- Yummy goodies: [[http://iris.karalabe.com/talks][talks]] | [[http://iris.karalabe.com/papers][papers]] | [[http://iris.karalabe.com/downloads][downloads]]

.image java.v1/whitespace.png 0 0

Iris community:

- Google group: [[https://groups.google.com/group/project-iris][project-iris]]
- Twitter announces: [[https://twitter.com/iriscmf][@iriscmf]]
- GitHub organization: [[https://github.com/project-iris][project-iris]]
