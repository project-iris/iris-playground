diff -r 2f7aa2d4d377 playground/socket/socket.go
--- a/playground/socket/socket.go	Fri Aug 01 15:04:49 2014 -0700
+++ b/playground/socket/socket.go	Sun Sep 21 13:25:48 2014 +0300
@@ -28,6 +28,7 @@
 	"os"
 	"os/exec"
 	"path/filepath"
+	"regexp"
 	"runtime"
 	"strconv"
 	"strings"
@@ -242,48 +243,113 @@
 	// (rather than the go tool process).
 	// This makes Kill work.
 
-	bin := filepath.Join(tmpdir, "compile"+strconv.Itoa(<-uniq))
-	src := bin + ".go"
-	if runtime.GOOS == "windows" {
-		bin += ".exe"
+	// Detect the snippet language (default to Go)
+	lang := "go"
+	switch {
+	case regexp.MustCompile("-module\\([a-z_]*\\).").FindString(body) != "":
+		lang = "erlang"
+	case regexp.MustCompile("public static void main\\(").FindString(body) != "":
+		lang = "java"
+	case regexp.MustCompile("def main\\(").FindString(body) != "":
+		lang = "scala"
 	}
 
-	// write body to x.go
+	// Transform the source code if needed
+	id := "compile" + strconv.Itoa(<-uniq)
+	bin := filepath.Join(tmpdir, id)
+	src := bin
+	switch lang {
+	case "go":
+		src += ".go"
+		if runtime.GOOS == "windows" {
+			bin += ".exe"
+		}
+	case "erlang":
+		re := regexp.MustCompile("-module\\([a-z_]*\\).")
+		body = re.ReplaceAllString(body, "-module("+id+").")
+
+		src += ".erl"
+		bin += ".beam"
+	case "java":
+		re := regexp.MustCompile("public class ([A-Za-z_]+) ")
+		name := re.FindStringSubmatch(body)[1]
+		body = strings.Replace(body, name, id, -1)
+
+		src += ".java"
+		bin += "/"
+
+	case "scala":
+		src += ".scala"
+		bin += ".bin.scala"
+	}
+
+	// Write body
 	defer os.Remove(src)
 	err := ioutil.WriteFile(src, []byte(body), 0666)
 	if err != nil {
 		return err
 	}
 
-	// build x.go, creating x
+	// Compile the code, creating whatever binaries
 	p.bin = bin // to be removed by p.end
 	dir, file := filepath.Split(src)
-	args := []string{"go", "build", "-tags", "OMIT"}
-	if opt != nil && opt.Race {
-		p.out <- &Message{
-			Id: p.id, Kind: "stderr",
-			Body: "Running with race detector.\n",
+
+	args := []string{}
+	switch lang {
+	case "go":
+		args = []string{"go", "build", "-tags", "OMIT"}
+		if opt != nil && opt.Race {
+			p.out <- &Message{
+				Id: p.id, Kind: "stderr",
+				Body: "Running with race detector.\n",
+			}
+			args = append(args, "-race")
 		}
-		args = append(args, "-race")
+		args = append(args, "-o", bin, file)
+
+	case "erlang":
+		args = []string{"erlc", "-o", bin, file}
+
+	case "java":
+		if err := os.Mkdir(bin, 0700); err != nil {
+			return err
+		}
+		args = []string{"javac", "-d", bin, "-cp", os.Getenv("CLASSPATH") + ":.", file}
+
+	case "scala":
+		args = []string{"test", "true"}
 	}
-	args = append(args, "-o", bin, file)
 	cmd := p.cmd(dir, args...)
 	cmd.Stdout = cmd.Stderr // send compiler output to stderr
 	if err := cmd.Run(); err != nil {
 		return err
 	}
 
-	// run x
-	if isNacl() {
-		cmd, err = p.naclCmd(bin)
-		if err != nil {
-			return err
+	// Run the compiled binary or distribution
+	switch lang {
+	case "go":
+		if isNacl() {
+			cmd, err = p.naclCmd(bin)
+			if err != nil {
+				return err
+			}
+		} else {
+			cmd = p.cmd("", bin)
 		}
-	} else {
-		cmd = p.cmd("", bin)
-	}
-	if opt != nil && opt.Race {
-		cmd.Env = append(cmd.Env, "GOMAXPROCS=2")
+		if opt != nil && opt.Race {
+			cmd.Env = append(cmd.Env, "GOMAXPROCS=2")
+		}
+
+	case "erlang":
+		cmd = p.cmd(dir, "erl", "-noshell", "-s", id, "main", "-s", "erlang", "halt")
+
+	case "java":
+		cmd = p.cmd(bin, "java", "-cp", os.Getenv("CLASSPATH")+":.", id)
+
+	case "scala":
+		// Copy the source, we're going to run that
+		exec.Command("cp", src, bin).Run()
+		cmd = p.cmd("", "scala", "-cp", os.Getenv("SCALA_PATH"), bin)
 	}
 	if err := cmd.Start(); err != nil {
 		// If we failed to exec, that might be because they built
@@ -309,7 +375,7 @@
 // given error value. It also removes the binary.
 func (p *process) end(err error) {
 	if p.bin != "" {
-		defer os.Remove(p.bin)
+		defer os.RemoveAll(p.bin)
 	}
 	m := &Message{Id: p.id, Kind: "end"}
 	if err != nil {
